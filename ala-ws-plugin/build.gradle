buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
    }
}

version "2.0-SNAPSHOT"
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin:"maven-publish"

//apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'

sourceCompatibility = 1.7
targetCompatibility = 1.7


repositories {
    mavenLocal()
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-dependencies"
    compile "org.grails:grails-web-boot"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:scaffolding"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    // Grails plugin dependencies

    compile 'org.grails.plugins:http-builder-helper:1.0.2'
    runtime "org.grails.plugins:ala-auth:3.0.0-SNAPSHOT"

    // Regular JAR dependencies
    compile "org.apache.httpcomponents:httpmime:4.3.3"
    compile "javax.validation:validation-api:1.1.0.Final"
    compile "javax.el:javax.el-api:2.2.4"

    compile "org.glassfish.web:javax.el:2.2.4"
    compile "org.hibernate:hibernate-validator:5.1.3.Final"
    compile "org.hibernate:hibernate-validator-annotation-processor:5.1.3.Final"


    testCompile ("io.ratpack:ratpack-core:1.2.0") {
        exclude group: 'io.ratpack', module: 'ratpack-guice'
    }
    testCompile "io.ratpack:ratpack-test:1.2.0"
    testCompile ("io.ratpack:ratpack-groovy:1.2.0") {
        exclude group: 'io.ratpack', module: 'ratpack-guice'
    }
    testCompile "io.ratpack:ratpack-groovy-test:1.2.0"
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
}
// enable if you wish to package this plugin as a standalone application
bootRepackage.enabled = false
grailsPublish {
    // TODO: Provide values here
//    user = 'user'
//    key = 'key'
    githubSlug = 'AtlasOfLivingAustralia/ala-ws-plugin'
    websiteUrl = 'http://github.com/AtlasOfLivingAustralia/ala-ws-plugin'
    license {
        name = 'MPL-2.0'
    }
    issueTrackerUrl = 'http://github.com/AtlasOfLivingAustralia/ala-ws-plugin/issues'
    vcsUrl = 'http://github.com/AtlasOfLivingAustralia/ala-ws-plugin'
    title = "ALA WS Plugin"
    desc = "Plugin for invoking ALA web services"
    developers = [:]
}

assets {
    packagePlugin = true
}

publishing {
    repositories {
        maven {
            name 'Nexus'
            url "https://nexus.ala.org.au/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases' }"
            credentials {
                username = System.getenv('TRAVIS_DEPLOY_USERNAME')
                password = System.getenv('TRAVIS_DEPLOY_PASSWORD')
            }
        }
    }
    publications {
        mavenJar(MavenPublication) {
            pom.withXml {
                def pomNode = asNode()
                pomNode.dependencyManagement.replaceNode {}

                // simply remove dependencies without a version
                // version-less dependencies are handled with dependencyManagement
                // see https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/8 for more complete solutions
                pomNode.dependencies.dependency.findAll {
                    it.version.text().isEmpty()
                }.each {
                    it.replaceNode {}
                }
            }
            from components.java

        }
    }
}